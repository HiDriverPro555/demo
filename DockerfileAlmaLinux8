# === STAGE 1: Build ===
FROM almalinux:8 as builder
ENV PHP_VERSION=7.4
# Actualizar sistema e instalar repositorios
RUN dnf upgrade -y && \
    dnf install -y epel-release \
    https://rpms.remirepo.net/enterprise/remi-release-8.rpm  && \
    dnf module reset php -y && \
    dnf module enable php:remi-${PHP_VERSION} -y
# Instalar PHP y extensiones comunes
RUN dnf install -y \
    php php-cli php-fpm php-common \
    php-exif php-mbstring php-curl php-gd php-mysqli php-dom \
    php-fileinfo php-ctype php-gettext php-json php-libxml \
    php-mcrypt php-mysqlnd php-openssl php-sockets php-zlib \
    php-soap php-bcmath php-intl php-pecl-mongodb \
    php-pecl-imagick php-devel php-pear gcc make autoconf unzip \
    httpd wget curl nano git procps-ng which bc iproute cronie net-tools \
    libjpeg-turbo libpng libwebp freetype libzip && \
    dnf clean all
# Instalar dependencias necesarias para compilar Memcache
RUN dnf install -y php-devel gcc make autoconf php-pear libtool zlib-devel

# Probar la instalación del paquete precompilado directamente desde REMI
RUN echo "🟡 Instalando memcache desde repositorio REMI..." && \
    dnf install -y php-pecl-memcache --enablerepo=remi && \
    php -m | grep memcache

# En caso de que lo anterior falle, dejar un método alternativo comentado para debugging
# RUN echo "🟡 Intentando instalar memcache desde PECL con verbose..." && \
#     pecl -v install memcache-4.0.5.2 2>&1 || echo "Error de instalación registrado pero continuando"

# Instalar ionCube Loader
RUN curl -fsSL https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz  | tar -xz && \
    cp ioncube/ioncube_loader_lin_${PHP_VERSION}.so /usr/lib64/php/modules/ && \
    echo "zend_extension=ioncube_loader_lin_${PHP_VERSION}.so" > /etc/php.d/00-ioncube.ini && \
    rm -rf ioncube*
# Configurar PHP.ini para desarrollo
RUN cp /etc/php.ini /etc/php.ini.bak && \
    sed -i 's/display_errors = .*/display_errors = On/' /etc/php.ini && \
    sed -i 's/display_startup_errors = .*/display_startup_errors = On/' /etc/php.ini && \
    sed -i 's|;error_log = php_errors.log|error_log = /var/log/php_errors.log|' /etc/php.ini && \
    sed -i 's|;log_errors = On|log_errors = On|' /etc/php.ini && \
    sed -i 's/short_open_tag = .*/short_open_tag = On/' /etc/php.ini && \
    sed -i 's/disable_functions = .*/disable_functions =/' /etc/php.ini && \
    sed -i 's/zlib.output_compression = .*/zlib.output_compression = On/' /etc/php.ini && \
    sed -i 's/post_max_size = .*/post_max_size = 900M/' /etc/php.ini && \
    sed -i 's/upload_max_filesize = .*/upload_max_filesize = 900M/' /etc/php.ini && \
    sed -i 's/max_input_time = .*/max_input_time = 0/' /etc/php.ini && \
    sed -i 's/;max_input_vars = .*/max_input_vars = 10000/' /etc/php.ini && \
    mkdir -p /var/log && touch /var/log/php_errors.log
# Instalar Node.js 20
RUN dnf install -y curl which && \
    curl -fsSL https://rpm.nodesource.com/setup_20.x  | bash - && \
    dnf install -y nodejs
# Limpiar cache final
RUN dnf clean all

# === STAGE 2: Runtime ===
FROM almalinux:8
# Copiar archivos del stage build
COPY --from=builder / /
# Directorios necesarios
RUN mkdir -p /run/php-fpm && \
    chown apache:apache /run/php-fpm
# Copiar código fuente
COPY ./ /var/www/html/
RUN chown -R apache:apache /var/www/html && \
    chmod -R 755 /var/www/html

# Activar mod_rewrite y aumentar límites de URI
RUN echo "LoadModule rewrite_module modules/mod_rewrite.so" >> /etc/httpd/conf/httpd.conf && \
    sed -i 's/AllowOverride None/AllowOverride All/i' /etc/httpd/conf/httpd.conf && \
    echo "LimitRequestLine 16384" >> /etc/httpd/conf/httpd.conf && \
    echo "LimitRequestFieldSize 16384" >> /etc/httpd/conf/httpd.conf

# Proxy PHP-FPM
RUN printf '<FilesMatch \\.php$>\n    SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"\n</FilesMatch>\n' > /etc/httpd/conf.d/php-fpm.conf

# Exponer puertos específicos
EXPOSE 80 

# Comando de inicio
CMD ["/bin/bash", "-c", "rm -f /run/php-fpm/www.sock; mkdir -p /run/php-fpm; chown apache:apache /run/php-fpm; php-fpm; chown apache:apache /run/php-fpm/www.sock; exec httpd -D FOREGROUND"]

# Labels para EasyPanel
LABEL maintainer="yupiglobal@gmail.com"
LABEL description="HiDriver - Aplicación PHP segura con AlmaLinux 8"
LABEL version="1.0.0"
LABEL security.scan="required"